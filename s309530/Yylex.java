/* The following code was generated by JFlex 1.7.0 */

/**************************
 Scanner
***************************/

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>scanner.jflex</tt>
 */
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\65\1\63\2\0\1\64\22\0\1\65\2\0\1\4\1\51"+
    "\1\0\1\51\1\0\1\53\1\54\1\7\1\2\1\56\1\10\1\0"+
    "\1\24\1\15\1\14\1\11\1\13\1\22\1\17\1\21\1\12\1\20"+
    "\1\16\1\0\1\55\5\0\1\5\1\23\1\50\1\41\1\52\1\47"+
    "\2\0\1\57\1\42\2\0\1\60\1\37\1\34\1\61\2\0\1\25"+
    "\1\0\1\62\5\0\1\1\1\0\1\3\1\0\1\6\1\0\1\43"+
    "\1\32\1\35\1\52\1\26\1\52\6\0\1\31\1\44\1\36\1\27"+
    "\1\0\1\33\1\0\1\30\1\45\1\40\2\0\1\46\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff96\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\0\1\4\1\5\2\6"+
    "\1\0\1\7\2\0\1\10\1\11\1\12\1\13\1\0"+
    "\2\14\1\0\1\15\16\0\1\16\1\0\1\17\1\20"+
    "\65\0\2\21\20\0\2\21\14\0\1\21\27\0\1\22"+
    "\41\0\2\21\7\0\2\21\1\0\1\21\44\0\1\23"+
    "\10\0\2\21\4\0\2\21\1\0\1\21\1\23";

  private static int [] zzUnpackAction() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\154\0\242\0\330\0\154\0\154"+
    "\0\u010e\0\154\0\u0144\0\154\0\u017a\0\u01b0\0\154\0\154"+
    "\0\154\0\154\0\u01e6\0\154\0\u021c\0\u0252\0\154\0\u0288"+
    "\0\u02be\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438"+
    "\0\u046e\0\u04a4\0\u04da\0\u0510\0\u0546\0\154\0\u057c\0\154"+
    "\0\154\0\u05b2\0\u05e8\0\u061e\0\u0654\0\u068a\0\u06c0\0\u06f6"+
    "\0\u072c\0\u0762\0\u0798\0\u07ce\0\u0804\0\u083a\0\u0870\0\u08a6"+
    "\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56"+
    "\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06"+
    "\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a\0\u0d80\0\u0db6"+
    "\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\u0f66"+
    "\0\u0f9c\0\u0fd2\0\u1008\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u1116"+
    "\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u1224\0\u125a\0\u1290\0\u12c6"+
    "\0\u12fc\0\u1332\0\u1368\0\u139e\0\u13d4\0\u140a\0\u1440\0\u1476"+
    "\0\u14ac\0\u14e2\0\u1518\0\u154e\0\u1584\0\u15ba\0\u15f0\0\u1626"+
    "\0\u165c\0\u1692\0\u16c8\0\u16fe\0\u1734\0\u176a\0\u17a0\0\u17d6"+
    "\0\u180c\0\u1842\0\u1878\0\u18ae\0\u18e4\0\u191a\0\u1950\0\u1986"+
    "\0\u19bc\0\u19f2\0\u1a28\0\u1a5e\0\u1a94\0\u1aca\0\u1b00\0\u1b36"+
    "\0\u1b6c\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a\0\154\0\u1cb0"+
    "\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88\0\u1dbe\0\u1df4\0\u1e2a\0\u1e60"+
    "\0\u1e96\0\u1ecc\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4\0\u1fda\0\u2010"+
    "\0\u2046\0\u207c\0\u20b2\0\u20e8\0\u211e\0\u2154\0\u218a\0\u21c0"+
    "\0\u21f6\0\u222c\0\u2262\0\u2298\0\u22ce\0\u2304\0\u233a\0\u2370"+
    "\0\u23a6\0\u23dc\0\u2412\0\u2448\0\u247e\0\u24b4\0\u24ea\0\u2520"+
    "\0\u2556\0\u258c\0\u25c2\0\u25f8\0\u262e\0\u2664\0\u269a\0\u26d0"+
    "\0\u2706\0\u273c\0\u2772\0\u27a8\0\u27de\0\u2814\0\u284a\0\u2880"+
    "\0\u28b6\0\u28ec\0\u2922\0\u2958\0\u298e\0\u29c4\0\u29fa\0\u2a30"+
    "\0\u2a66\0\u2a9c\0\u2ad2\0\u2b08\0\u2b3e\0\u2b74\0\u2baa\0\u2be0"+
    "\0\u2c16\0\u2c4c\0\u2c82\0\u2cb8\0\u2cee\0\u2d24\0\u2d5a\0\u2d90"+
    "\0\u2dc6\0\u2dfc\0\u2e32\0\u2e68\0\u2e9e\0\u2ed4\0\u2f0a\0\u2f40"+
    "\0\u2f76\0\u2fac\0\u2fe2\0\u2fac\0\u2fe2\0\u3018\0\u304e\0\u3084"+
    "\0\154\0\u30ba\0\u30f0\0\u3126\0\u24b4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\1\5\1\6\1\0\1\7"+
    "\1\10\4\11\1\12\5\11\1\13\1\14\1\15\22\0"+
    "\1\16\2\0\1\17\1\20\1\21\1\22\1\23\3\0"+
    "\1\24\1\25\1\24\1\0\1\26\156\0\1\27\67\0"+
    "\1\30\70\0\12\11\51\0\1\31\141\0\1\32\11\0"+
    "\1\33\51\0\1\34\44\0\1\35\111\0\1\24\4\0"+
    "\1\36\73\0\1\37\1\40\1\41\2\42\1\0\2\41"+
    "\2\43\1\44\54\0\1\45\134\0\1\46\12\0\1\47"+
    "\3\0\13\47\2\0\1\47\3\0\1\47\2\0\1\47"+
    "\3\0\1\47\1\0\1\47\3\0\2\47\1\0\1\47"+
    "\74\0\1\50\31\0\1\51\40\0\2\36\1\52\63\36"+
    "\11\0\1\53\2\41\1\42\1\0\2\41\3\43\54\0"+
    "\1\43\3\41\1\43\2\41\3\43\52\0\1\54\2\0"+
    "\3\55\1\0\2\55\55\0\1\54\1\0\1\43\3\41"+
    "\1\43\2\41\3\43\55\0\3\55\1\0\2\55\57\0"+
    "\1\43\1\55\2\41\1\43\1\55\1\56\2\0\1\43"+
    "\60\0\1\57\55\0\1\60\3\0\13\60\2\0\1\60"+
    "\3\0\1\60\2\0\1\60\3\0\1\60\1\0\1\60"+
    "\3\0\2\60\1\0\1\60\13\0\2\36\1\52\1\61"+
    "\62\36\11\0\1\43\1\62\2\41\1\43\1\55\1\41"+
    "\1\0\2\43\53\0\1\63\1\64\1\65\2\66\1\0"+
    "\2\65\2\67\1\70\52\0\1\54\65\0\1\54\2\0"+
    "\3\55\2\0\1\55\57\0\1\71\61\0\1\72\3\0"+
    "\13\72\2\0\1\72\3\0\1\72\2\0\1\72\3\0"+
    "\1\72\1\0\1\72\3\0\2\72\1\0\1\72\13\0"+
    "\2\36\1\52\1\24\62\36\7\0\1\54\3\0\2\55"+
    "\62\0\1\73\2\65\1\66\1\0\2\65\3\67\54\0"+
    "\1\67\3\65\1\67\2\65\3\67\52\0\1\74\2\0"+
    "\3\75\1\0\2\75\55\0\1\74\1\0\1\67\3\65"+
    "\1\67\2\65\3\67\55\0\3\75\1\0\2\75\57\0"+
    "\1\67\1\75\2\65\1\67\1\75\1\76\2\0\1\67"+
    "\56\0\1\77\6\0\1\100\50\0\1\101\3\0\13\101"+
    "\2\0\1\101\3\0\1\101\2\0\1\101\3\0\1\101"+
    "\1\0\1\101\3\0\2\101\1\0\1\101\24\0\1\67"+
    "\1\102\2\65\1\67\1\75\1\65\1\0\2\67\53\0"+
    "\1\103\1\104\1\105\2\106\1\0\2\105\2\107\1\110"+
    "\52\0\1\74\65\0\1\74\2\0\3\75\2\0\1\75"+
    "\72\0\1\111\65\0\1\112\46\0\1\113\1\0\1\114"+
    "\1\0\13\113\2\0\1\113\3\0\1\113\2\0\1\113"+
    "\3\0\1\113\1\0\1\113\3\0\2\113\1\114\1\113"+
    "\22\0\1\74\3\0\2\75\62\0\1\115\2\105\1\106"+
    "\1\0\2\105\3\107\54\0\1\107\3\105\1\107\2\105"+
    "\3\107\52\0\1\116\2\0\3\117\1\0\2\117\55\0"+
    "\1\116\1\0\1\107\3\105\1\107\2\105\3\107\55\0"+
    "\3\117\1\0\2\117\57\0\1\107\1\117\2\105\1\107"+
    "\1\117\1\120\2\0\1\107\57\0\1\121\1\122\7\0"+
    "\1\123\6\0\1\124\2\0\1\125\1\0\1\126\41\0"+
    "\1\127\24\0\1\130\4\0\1\131\23\0\1\132\3\0"+
    "\13\132\2\0\1\132\3\0\1\132\2\0\1\132\3\0"+
    "\1\132\1\0\1\132\3\0\2\132\1\0\1\132\20\0"+
    "\1\133\3\0\13\133\2\0\1\133\3\0\1\133\2\0"+
    "\1\133\3\0\1\133\1\0\1\133\3\0\2\133\1\0"+
    "\1\133\24\0\1\107\1\134\2\105\1\107\1\117\1\105"+
    "\1\0\2\107\53\0\1\135\1\136\1\137\2\140\1\0"+
    "\2\137\2\141\1\142\52\0\1\116\65\0\1\116\2\0"+
    "\3\117\2\0\1\117\57\0\1\143\2\0\1\144\1\143"+
    "\66\0\1\145\75\0\1\146\74\0\1\147\66\0\1\150"+
    "\55\0\1\151\50\0\1\152\2\0\1\143\114\0\1\153"+
    "\50\0\1\154\44\0\1\155\3\0\13\155\2\0\1\155"+
    "\3\0\1\155\2\0\1\155\3\0\1\155\1\0\1\155"+
    "\3\0\2\155\1\0\1\155\20\0\1\156\3\0\13\156"+
    "\2\0\1\156\3\0\1\156\2\0\1\156\3\0\1\156"+
    "\1\0\1\156\3\0\2\156\1\0\1\156\22\0\1\116"+
    "\3\0\2\117\62\0\1\157\2\137\1\140\1\0\2\137"+
    "\3\141\54\0\1\141\3\137\1\141\2\137\3\141\52\0"+
    "\1\160\2\0\3\161\1\0\2\161\55\0\1\160\1\0"+
    "\1\141\3\137\1\141\2\137\3\141\55\0\3\161\1\0"+
    "\2\161\57\0\1\141\1\161\2\137\1\141\1\161\1\162"+
    "\2\0\1\141\67\0\1\163\65\0\1\164\65\0\1\165"+
    "\70\0\1\166\66\0\1\167\75\0\1\170\62\0\1\171"+
    "\54\0\1\172\105\0\1\173\53\0\1\174\40\0\1\175"+
    "\3\0\13\175\2\0\1\175\3\0\1\175\2\0\1\175"+
    "\3\0\1\175\1\0\1\175\3\0\2\175\1\0\1\175"+
    "\20\0\1\176\3\0\13\176\2\0\1\176\3\0\1\176"+
    "\2\0\1\176\3\0\1\176\1\0\1\176\3\0\2\176"+
    "\1\0\1\176\24\0\1\141\1\177\2\137\1\141\1\161"+
    "\1\137\1\0\2\141\53\0\1\200\1\201\1\202\2\203"+
    "\1\0\2\202\2\204\1\205\52\0\1\160\65\0\1\160"+
    "\2\0\3\161\2\0\1\161\57\0\1\206\1\0\1\207"+
    "\1\206\1\210\61\0\1\206\1\0\1\211\1\206\1\210"+
    "\61\0\1\212\1\0\1\211\102\0\1\213\73\0\1\214"+
    "\55\0\1\215\65\0\1\216\54\0\1\217\115\0\1\220"+
    "\53\0\1\221\41\0\1\114\41\0\1\114\21\0\1\222"+
    "\3\0\13\222\2\0\1\222\3\0\1\222\2\0\1\222"+
    "\3\0\1\222\1\0\1\222\3\0\2\222\1\0\1\222"+
    "\22\0\1\160\3\0\2\161\62\0\1\223\2\202\1\203"+
    "\1\0\2\202\3\204\54\0\1\204\3\202\1\204\2\202"+
    "\3\204\52\0\1\224\2\0\3\225\1\0\2\225\55\0"+
    "\1\224\1\0\1\204\3\202\1\204\2\202\3\204\55\0"+
    "\3\225\1\0\2\225\57\0\1\204\1\225\2\202\1\204"+
    "\1\225\1\226\2\0\1\204\54\0\12\227\57\0\2\227"+
    "\61\0\4\227\1\0\5\227\60\0\1\227\61\0\3\227"+
    "\2\0\5\227\71\0\1\230\71\0\1\231\64\0\1\232"+
    "\65\0\1\214\45\0\4\227\2\0\1\227\1\0\2\227"+
    "\106\0\1\233\67\0\1\234\25\0\1\235\1\0\1\236"+
    "\1\0\13\235\2\0\1\235\3\0\1\235\2\0\1\235"+
    "\3\0\1\235\1\0\1\235\3\0\2\235\1\236\1\235"+
    "\24\0\1\204\1\237\2\202\1\204\1\225\1\202\1\0"+
    "\2\204\53\0\1\240\1\241\1\242\2\243\1\0\2\242"+
    "\2\244\1\245\52\0\1\224\65\0\1\224\2\0\3\225"+
    "\2\0\1\225\77\0\1\246\62\0\1\247\71\0\1\250"+
    "\66\0\1\251\75\0\1\252\27\0\1\253\3\0\13\253"+
    "\2\0\1\253\3\0\1\253\2\0\1\253\3\0\1\253"+
    "\1\0\1\253\3\0\2\253\1\0\1\253\20\0\1\254"+
    "\3\0\13\254\2\0\1\254\3\0\1\254\2\0\1\254"+
    "\3\0\1\254\1\0\1\254\3\0\2\254\1\0\1\254"+
    "\22\0\1\224\3\0\2\225\62\0\1\255\2\242\1\243"+
    "\1\0\2\242\3\244\54\0\1\244\3\242\1\244\2\242"+
    "\3\244\52\0\1\256\2\0\3\257\1\0\2\257\55\0"+
    "\1\256\1\0\1\244\3\242\1\244\2\242\3\244\55\0"+
    "\3\257\1\0\2\257\57\0\1\244\1\257\2\242\1\244"+
    "\1\257\1\260\2\0\1\244\75\0\1\261\66\0\1\143"+
    "\60\0\1\262\105\0\1\143\52\0\1\263\37\0\1\264"+
    "\3\0\13\264\2\0\1\264\3\0\1\264\2\0\1\264"+
    "\3\0\1\264\1\0\1\264\3\0\2\264\1\0\1\264"+
    "\20\0\1\265\3\0\13\265\2\0\1\265\3\0\1\265"+
    "\2\0\1\265\3\0\1\265\1\0\1\265\3\0\2\265"+
    "\1\0\1\265\24\0\1\244\1\266\2\242\1\244\1\257"+
    "\1\242\1\0\2\244\53\0\1\267\1\270\1\271\2\272"+
    "\1\0\2\271\2\273\1\274\52\0\1\256\65\0\1\256"+
    "\2\0\3\257\2\0\1\257\74\0\1\275\72\0\1\144"+
    "\100\0\1\152\24\0\1\276\3\0\13\276\2\0\1\276"+
    "\3\0\1\276\2\0\1\276\3\0\1\276\1\0\1\276"+
    "\3\0\2\276\1\0\1\276\20\0\1\277\3\0\13\277"+
    "\2\0\1\277\3\0\1\277\2\0\1\277\3\0\1\277"+
    "\1\0\1\277\3\0\2\277\1\0\1\277\22\0\1\256"+
    "\3\0\2\257\62\0\1\300\2\271\1\272\1\0\2\271"+
    "\3\273\54\0\1\273\3\271\1\273\2\271\3\273\52\0"+
    "\1\301\2\0\3\302\1\0\2\302\55\0\1\301\1\0"+
    "\1\273\3\271\1\273\2\271\3\273\55\0\3\302\1\0"+
    "\2\302\57\0\1\273\1\302\2\271\1\273\1\302\1\303"+
    "\2\0\1\273\76\0\1\145\41\0\1\236\41\0\1\236"+
    "\21\0\1\304\3\0\13\304\2\0\1\304\3\0\1\304"+
    "\2\0\1\304\3\0\1\304\1\0\1\304\3\0\2\304"+
    "\1\0\1\304\24\0\1\273\1\305\2\271\1\273\1\302"+
    "\1\271\1\0\2\273\53\0\1\306\1\307\1\310\2\311"+
    "\1\0\2\310\2\312\1\313\52\0\1\301\65\0\1\301"+
    "\2\0\3\302\2\0\1\302\53\0\1\314\1\0\1\315"+
    "\1\0\13\314\2\0\1\314\3\0\1\314\2\0\1\314"+
    "\3\0\1\314\1\0\1\314\3\0\2\314\1\315\1\314"+
    "\22\0\1\301\3\0\2\302\62\0\1\316\2\310\1\311"+
    "\1\0\2\310\3\312\54\0\1\312\3\310\1\312\2\310"+
    "\3\312\52\0\1\317\2\0\3\320\1\0\2\320\55\0"+
    "\1\317\1\0\1\312\3\310\1\312\2\310\3\312\55\0"+
    "\3\320\1\0\2\320\57\0\1\312\1\320\2\310\1\312"+
    "\1\320\1\321\2\0\1\312\50\0\1\322\3\0\13\322"+
    "\2\0\1\322\3\0\1\322\2\0\1\322\3\0\1\322"+
    "\1\0\1\322\3\0\2\322\1\0\1\322\20\0\1\323"+
    "\3\0\13\323\2\0\1\323\3\0\1\323\2\0\1\323"+
    "\3\0\1\323\1\0\1\323\3\0\2\323\1\0\1\323"+
    "\24\0\1\312\1\324\2\310\1\312\1\320\1\310\1\0"+
    "\2\312\53\0\1\325\1\326\1\327\2\330\1\0\2\327"+
    "\2\331\1\332\52\0\1\317\65\0\1\317\2\0\3\320"+
    "\2\0\1\320\53\0\1\333\3\0\13\333\2\0\1\333"+
    "\3\0\1\333\2\0\1\333\3\0\1\333\1\0\1\333"+
    "\3\0\2\333\1\0\1\333\20\0\1\334\3\0\13\334"+
    "\2\0\1\334\3\0\1\334\2\0\1\334\3\0\1\334"+
    "\1\0\1\334\3\0\2\334\1\0\1\334\22\0\1\317"+
    "\3\0\2\320\62\0\1\335\2\327\1\330\1\0\2\327"+
    "\3\331\54\0\1\331\3\327\1\331\2\327\3\331\52\0"+
    "\1\336\2\0\3\337\1\0\2\337\55\0\1\336\1\0"+
    "\1\331\3\327\1\331\2\327\3\331\55\0\3\337\1\0"+
    "\2\337\57\0\1\331\1\337\2\327\1\331\1\337\1\340"+
    "\2\0\1\331\50\0\1\341\3\0\13\341\2\0\1\341"+
    "\3\0\1\341\2\0\1\341\3\0\1\341\1\0\1\341"+
    "\3\0\2\341\1\0\1\341\20\0\1\342\3\0\13\342"+
    "\2\0\1\342\3\0\1\342\2\0\1\342\3\0\1\342"+
    "\1\0\1\342\3\0\2\342\1\0\1\342\24\0\1\331"+
    "\1\343\2\327\1\331\1\337\1\327\1\0\2\331\53\0"+
    "\1\344\1\345\1\346\2\347\1\0\2\346\2\350\1\351"+
    "\52\0\1\336\65\0\1\336\2\0\3\337\2\0\1\337"+
    "\55\0\1\315\41\0\1\315\21\0\1\352\3\0\13\352"+
    "\2\0\1\352\3\0\1\352\2\0\1\352\3\0\1\352"+
    "\1\0\1\352\3\0\2\352\1\0\1\352\22\0\1\336"+
    "\3\0\2\337\62\0\1\353\2\346\1\347\1\0\2\346"+
    "\3\350\54\0\1\350\3\346\1\350\2\346\3\350\52\0"+
    "\1\354\2\0\3\355\1\0\2\355\55\0\1\354\1\0"+
    "\1\350\3\346\1\350\2\346\3\350\55\0\3\355\1\0"+
    "\2\355\57\0\1\350\1\355\2\346\1\350\1\355\1\356"+
    "\2\0\1\350\50\0\1\357\1\0\1\236\1\0\13\357"+
    "\2\0\1\357\3\0\1\357\2\0\1\357\3\0\1\357"+
    "\1\0\1\357\3\0\2\357\1\236\1\357\24\0\1\350"+
    "\1\360\2\346\1\350\1\355\1\346\1\0\2\350\53\0"+
    "\1\361\1\362\1\363\2\364\1\0\2\363\2\365\1\366"+
    "\52\0\1\354\65\0\1\354\2\0\3\355\2\0\1\355"+
    "\53\0\1\367\3\0\13\367\2\0\1\367\3\0\1\367"+
    "\2\0\1\367\3\0\1\367\1\0\1\367\3\0\2\367"+
    "\1\0\1\367\22\0\1\354\3\0\2\355\62\0\1\370"+
    "\2\363\1\364\1\0\2\363\3\365\54\0\1\365\3\363"+
    "\1\365\2\363\3\365\55\0\3\371\1\0\2\371\57\0"+
    "\1\365\1\371\2\363\1\365\1\371\1\372\2\0\1\365"+
    "\50\0\1\373\3\0\13\373\2\0\1\373\3\0\1\373"+
    "\2\0\1\373\3\0\1\373\1\0\1\373\3\0\2\373"+
    "\1\0\1\373\24\0\1\365\1\374\2\363\1\365\1\371"+
    "\1\363\1\0\2\365\55\0\3\371\2\0\1\371\53\0"+
    "\1\375\3\0\13\375\2\0\1\375\3\0\1\375\2\0"+
    "\1\375\3\0\1\375\1\0\1\375\3\0\2\375\1\0"+
    "\1\375\26\0\2\371\51\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12636];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\2\11\2\0\2\11\1\1\1\11\1\0"+
    "\1\11\2\0\4\11\1\0\1\11\1\1\1\0\1\11"+
    "\16\0\1\11\1\0\2\11\65\0\2\1\20\0\2\1"+
    "\14\0\1\1\27\0\1\11\41\0\2\1\7\0\2\1"+
    "\1\0\1\1\44\0\1\1\10\0\2\1\4\0\1\11"+
    "\1\1\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	private Symbol sym(int type) {
		return new Symbol(type, yyline, yycolumn);
	}
	
	private Symbol sym(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}
	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 190) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return sym(sym.OS);
            } 
            // fall through
          case 20: break;
          case 2: 
            { return sym(sym.PLUS);
            } 
            // fall through
          case 21: break;
          case 3: 
            { return sym(sym.CS);
            } 
            // fall through
          case 22: break;
          case 4: 
            { return sym(sym.STAR);
            } 
            // fall through
          case 23: break;
          case 5: 
            { return sym(sym.MINUS);
            } 
            // fall through
          case 24: break;
          case 6: 
            { return sym(sym.UINT, Integer.parseInt(yytext()));
            } 
            // fall through
          case 25: break;
          case 7: 
            { return sym(sym.DIV);
            } 
            // fall through
          case 26: break;
          case 8: 
            { return sym(sym.OB);
            } 
            // fall through
          case 27: break;
          case 9: 
            { return sym(sym.CB);
            } 
            // fall through
          case 28: break;
          case 10: 
            { return sym(sym.SC);
            } 
            // fall through
          case 29: break;
          case 11: 
            { return sym(sym.CM);
            } 
            // fall through
          case 30: break;
          case 12: 
            { ;
            } 
            // fall through
          case 31: break;
          case 13: 
            { return sym(sym.SEP);
            } 
            // fall through
          case 32: break;
          case 14: 
            { return sym(sym.SUM_WD, new String(yytext()));
            } 
            // fall through
          case 33: break;
          case 15: 
            { return sym(sym.CMP_WD, new String(yytext()));
            } 
            // fall through
          case 34: break;
          case 16: 
            { return sym(sym.INS_WD, new String(yytext()));
            } 
            // fall through
          case 35: break;
          case 17: 
            { return sym(sym.TOKEN1);
            } 
            // fall through
          case 36: break;
          case 18: 
            { return sym(sym.TOKEN2);
            } 
            // fall through
          case 37: break;
          case 19: 
            { return sym(sym.TOKEN3);
            } 
            // fall through
          case 38: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
